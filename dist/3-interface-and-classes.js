/**
 * Interfaces
 */
var interfaceAndClasses;
(function (interfaceAndClasses) {
    /**
     * Classes
     */
    class MovieService {
        constructor(someInut) {
            this.someInut = someInut;
            this._version = "1.3.3.7"; //Used for our custom getter method
            this.movies = [];
        }
        get version() {
            return "v " + this._version;
        }
        addMovie(movie) {
            this.movies.push(movie);
        }
        getProductByName(name) {
            var candidates = this.movies.filter((movie) => {
                return movie.name == name;
            });
            return (candidates.length > 0) ? candidates[0] : null;
        }
    }
    MovieService.TOP_RATING = 10; //static constant property
    var movies = new MovieService("SomeStringInput");
    //Add objects that keeps the interface
    movies.addMovie({ id: 0, name: 'God father' });
    movies.addMovie({ id: 1, name: 'Lock stock and 2 smoking barrels', description: "Gangsta movie" });
    //Custom getter
    movies.version; // 'v 1.3.3.7'
    //Statuc value
    MovieService.TOP_RATING; // 10;
    //See my awesome autocomplete
    var movie = movies.getProductByName("God father");
    //Allow defining any property
    movie['sadaomeViewRelatedValue'] = true;
    /**
     *  Abstract classes
     */
    class Person {
        constructor() {
            console.log("Do some very important calculation");
        }
        isLoggedIn() {
            return false;
        }
    }
    class Major extends Person {
        constructor() {
            super(); //Call parent constructor
        }
        //Must implement this method
        securityClearance() {
            return "DEFCON5";
        }
    }
})(interfaceAndClasses || (interfaceAndClasses = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjMtaW50ZXJmYWNlLWFuZC1jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBQ0gsSUFBTyxtQkFBbUIsQ0EyRnpCO0FBM0ZELFdBQU8sbUJBQW1CLEVBQUMsQ0FBQztJQVN4Qjs7T0FFRztJQUNIO1FBTUksWUFBb0IsUUFBaUI7WUFBakIsYUFBUSxHQUFSLFFBQVEsQ0FBUztZQUg3QixhQUFRLEdBQVksU0FBUyxDQUFDLENBQUMsbUNBQW1DO1lBSXRFLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFFRCxJQUFJLE9BQU87WUFDUCxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDaEMsQ0FBQztRQUVELFFBQVEsQ0FBQyxLQUFhO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxnQkFBZ0IsQ0FBQyxJQUFJO1lBQ2pCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSztnQkFDdEMsTUFBTSxDQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFBO1lBQ0YsTUFBTSxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQzFELENBQUM7SUFDTCxDQUFDO0lBbkJpQix1QkFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQjtJQW9CN0QsSUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUdqRCxzQ0FBc0M7SUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRyxDQUFDLEVBQUUsSUFBSSxFQUFHLFlBQVksRUFBQyxDQUFDLENBQUM7SUFDaEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRyxDQUFDLEVBQUUsSUFBSSxFQUFHLGtDQUFrQyxFQUFFLFdBQVcsRUFBRyxlQUFlLEVBQUMsQ0FBQyxDQUFDO0lBRXJHLGVBQWU7SUFDZixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYztJQUk5QixjQUFjO0lBQ2QsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU07SUFHL0IsNkJBQTZCO0lBQzdCLElBQUksS0FBSyxHQUFXLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUUxRCw2QkFBNkI7SUFDN0IsS0FBSyxDQUFDLHlCQUF5QixDQUFDLEdBQUcsSUFBSSxDQUFDO0lBT3hDOztPQUVHO0lBQ0g7UUFNSTtZQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsQ0FBQTtRQUNyRCxDQUFDO1FBRUQsVUFBVTtZQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNMLENBQUM7SUFFRCxvQkFBb0IsTUFBTTtRQUV0QjtZQUNJLE9BQU8sQ0FBQyxDQUFDLHlCQUF5QjtRQUN0QyxDQUFDO1FBQ0QsNEJBQTRCO1FBQzVCLGlCQUFpQjtZQUNiLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDLEVBM0ZNLENBMEZGLGtCQTFGcUIsS0FBbkIsbUJBQW1CLFFBMkZ6QiIsImZpbGUiOiIzLWludGVyZmFjZS1hbmQtY2xhc3Nlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBJbnRlcmZhY2VzXHJcbiAqL1xyXG5tb2R1bGUgaW50ZXJmYWNlQW5kQ2xhc3NlcyB7XHJcbiAgICBpbnRlcmZhY2UgTW92aWUge1xyXG4gICAgICAgIGlkIDogbnVtYmVyO1xyXG4gICAgICAgIG5hbWUgOiBzdHJpbmc7XHJcbiAgICAgICAgLy8gcmF0aW5nIDogbnVtYmVyOyAgICAgICAvL2JyZWFrIGltcGxlbWVudGF0aW9uXHJcbiAgICAgICAgZGVzY3JpcHRpb24/IDogc3RyaW5nOyAgICAvL29wdGlvbmFsXHJcbiAgICAgICAgLy9ba2V5IDogc3RyaW5nXSA6IGFueTsgICAgIC8vQWxsb3dzIHVzIHRvIGRvIG1vdmllWydzb21lT3RoZXJQcm9wZXJ0eSddID0gZmFsc2U7XHJcbiAgICB9ICAgIFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3Nlc1xyXG4gICAgICovXHJcbiAgICBjbGFzcyBNb3ZpZVNlcnZpY2Uge1xyXG4gICAgICAgIHByaXZhdGUgbW92aWVzIDogTW92aWVbXTtcclxuICAgICAgICBwcml2YXRlIHNvbWVJbnB1dCA6IHN0cmluZzsgLy9PYnNvbGV0ZSB3aGVuIHVzaW5nIHByaXZhdGUgaW4gY29uc3RydWN0b3JcclxuICAgICAgICBwcml2YXRlIF92ZXJzaW9uIDogc3RyaW5nID0gXCIxLjMuMy43XCI7IC8vVXNlZCBmb3Igb3VyIGN1c3RvbSBnZXR0ZXIgbWV0aG9kXHJcbiAgICAgICAgcHVibGljIHN0YXRpYyBUT1BfUkFUSU5HID0gMTA7IC8vc3RhdGljIGNvbnN0YW50IHByb3BlcnR5XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBzb21lSW51dCA6IHN0cmluZykgeyAgIFxyXG4gICAgICAgICAgICB0aGlzLm1vdmllcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBnZXQgdmVyc2lvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwidiBcIiArIHRoaXMuX3ZlcnNpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGFkZE1vdmllKG1vdmllIDogTW92aWUpIDogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMubW92aWVzLnB1c2gobW92aWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnZXRQcm9kdWN0QnlOYW1lKG5hbWUpIDogTW92aWUge1xyXG4gICAgICAgICAgICB2YXIgY2FuZGlkYXRlcyA9IHRoaXMubW92aWVzLmZpbHRlcigobW92aWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAgbW92aWUubmFtZSA9PSBuYW1lO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICByZXR1cm4gKGNhbmRpZGF0ZXMubGVuZ3RoID4gMCkgPyBjYW5kaWRhdGVzWzBdIDogbnVsbDsgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBtb3ZpZXMgPSBuZXcgTW92aWVTZXJ2aWNlKFwiU29tZVN0cmluZ0lucHV0XCIpO1xyXG4gICAgXHJcbiAgICBcclxuICAgIC8vQWRkIG9iamVjdHMgdGhhdCBrZWVwcyB0aGUgaW50ZXJmYWNlXHJcbiAgICBtb3ZpZXMuYWRkTW92aWUoeyBpZCA6IDAsIG5hbWUgOiAnR29kIGZhdGhlcid9KTtcclxuICAgIG1vdmllcy5hZGRNb3ZpZSh7IGlkIDogMSwgbmFtZSA6ICdMb2NrIHN0b2NrIGFuZCAyIHNtb2tpbmcgYmFycmVscycsIGRlc2NyaXB0aW9uIDogXCJHYW5nc3RhIG1vdmllXCJ9KTtcclxuXHJcbiAgICAvL0N1c3RvbSBnZXR0ZXJcclxuICAgIG1vdmllcy52ZXJzaW9uOyAvLyAndiAxLjMuMy43J1xyXG4gICAgXHJcblxyXG5cclxuICAgIC8vU3RhdHVjIHZhbHVlXHJcbiAgICBNb3ZpZVNlcnZpY2UuVE9QX1JBVElORzsgLy8gMTA7XHJcblxyXG5cclxuICAgIC8vU2VlIG15IGF3ZXNvbWUgYXV0b2NvbXBsZXRlXHJcbiAgICB2YXIgbW92aWUgOiBNb3ZpZSA9IG1vdmllcy5nZXRQcm9kdWN0QnlOYW1lKFwiR29kIGZhdGhlclwiKTtcclxuICAgIFxyXG4gICAgLy9BbGxvdyBkZWZpbmluZyBhbnkgcHJvcGVydHlcclxuICAgIG1vdmllWydzYWRhb21lVmlld1JlbGF0ZWRWYWx1ZSddID0gdHJ1ZTtcclxuICAgIFxyXG4gICAgIFxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogIEFic3RyYWN0IGNsYXNzZXNcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgY2xhc3MgUGVyc29uIHtcclxuICAgICAgICBcclxuICAgICAgICBuYW1lIDogc3RyaW5nOyAgICBcclxuICAgICAgICBcclxuICAgICAgICBhYnN0cmFjdCAgc2VjdXJpdHlDbGVhcmFuY2UoKSA6IGFueVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRvIHNvbWUgdmVyeSBpbXBvcnRhbnQgY2FsY3VsYXRpb25cIilcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaXNMb2dnZWRJbigpIDogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgTWFqb3IgZXh0ZW5kcyBQZXJzb24ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICBzdXBlcigpOyAvL0NhbGwgcGFyZW50IGNvbnN0cnVjdG9yXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vTXVzdCBpbXBsZW1lbnQgdGhpcyBtZXRob2RcclxuICAgICAgICBzZWN1cml0eUNsZWFyYW5jZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiREVGQ09ONVwiO1xyXG4gICAgICAgIH1cclxuICAgIH0gICAgXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
